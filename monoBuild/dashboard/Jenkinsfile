pipeline {
    agent any
	parameters {
		string(name: "revision", defaultValue: "master", description: "branche ou TAG")
	}
	environment  {
		jdk6 = "JDK 1.6.0_20" 
		jdk7 = "JDK 1.7.0_25" 
		
		gitLabUrl = "http://192.168.25.68/eSirius/"
		
		remoteConnexion = "esii@192.168.25.94"
		remoteDepotConst = "depot"
		remoteDirectoryConst = "ESII-APPLICATION/app"
	}
    tools { 
        maven "Maven 3.0.4" 
    }
    stages {
    	stage ("Initialize") {
            steps {
				wrap([$class: 'AnsiColorBuildWrapper']) {
					echo "\u001B[34m revision : ${params.revision} \u001B[m"
				}
            }
        }
		
		stage("build dashboard") {
			environment  {
				rootGit = "dashboard"
				rootProject = "dashboard"
			}
			steps {
				runBuild(env.rootGit, env.rootProject, env.jdk7)
			}
		}
		
		stage("deploy dashboard") {
			environment  {
				rootGit = "dashboard"
				rootProject = "dashboard"
			}
			steps {
				dir ("${env.rootGit}Dir") {
					sh "ssh ${env.remoteConnexion} mkdir -p ${env.remoteDepotConst}/${params.revision}/${env.remoteDirectoryConst}/${env.rootProject}"
					sh "scp -r ${env.rootProject} ${env.remoteConnexion}:${env.remoteDepotConst}/${params.revision}/${env.remoteDirectoryConst}/${env.rootProject}"
				}
			}
		}

    	stage("clean workspace") {
            steps {
                cleanWs()
            }
        }
    }
}

void runBuild(String rootGit, String rootProject, String jdk) {
	sh "mkdir ${rootGit}Dir"

	dir ("${rootGit}Dir") {
		checkoutRevisionOnRepo(rootGit)
		mvnCleanInstall(rootProject, jdk)
	}
}

void checkoutRevisionOnRepo(String rootGit) {
	script {
		try {
			checkout scm: [ $class: "GitSCM", 
							userRemoteConfigs: [ [url: env.gitLabUrl+rootGit, credentialsId: "root"] ],
							branches: [ [name: params.revision] ]
						  ], poll: false
		}
		catch(Exception e) {
			wrap([$class: 'AnsiColorBuildWrapper']) {
				echo "\u001B[31mLa branche ou le tag '${params.revision}' n'existe pas sur le repository '${rootGit}' => build de la branche 'master'\u001B[m"
			}
			checkout scm: [ $class: "GitSCM", 
							userRemoteConfigs: [ [url: env.gitLabUrl+rootGit, credentialsId: "root"] ],
							branches: [ [name: 'master'] ]
						  ], poll: false
		}
	}
}

void mvnCleanInstall(String rootProject, String jdk) {
	withMaven (jdk: jdk) {
		sh "mvn -f ./${rootProject}/pom.xml clean install"
	}
}