pipeline {
	agent any
	parameters {
		choice(name: "revision", choices: "master\ndevelop\nbuild\n", description: "branche ou TAG")
		choice(name: "mavenProfile", choices: "prod_windows\nprod_linux\ndev_windows\ndev_linux\ncd\n", description: "profile maven")
		choice(name: "project", choices: "es2i\neCustomer\nsmsSender\nprocyon\neSecurity\neSirius-shared\neStat\nHistory\nePlanning\neSirius\nAppointment\neAdmin\neVision\n", description: "le projet Ã  builder")
	}
	environment {
		gitLabUrl = "http://192.168.25.68/eSirius/"
		primaryRemote = "jenkins@192.168.25.94"
		depotFolder = "depot"
	}
	stages {
		stage ("Initialize") {
			steps {
				wrap([$class: 'AnsiColorBuildWrapper']) {
					echo "\u001B[34m revision : ${params.revision} \u001B[m"
					echo "\u001B[34m mavenProfile : ${params.mavenProfile} \u001B[m"
					echo "\u001B[34m project : ${params.project} \u001B[m"
				}
				cleanWs()
			}
		}
		stage ("build eStat") {
			environment {
				gitRoot = "eStat"
				projectRoot = "eSirius-estat"
				jdkCompilation = "JDK 1.6.0_20"
				mvnVersion = "Maven 3.2.1"
				targetDirectory = "estat"
				sourceAppDirectory = "eSirius-estat-app/target"
				sourceExtension = ".war"
				sourceConfDirectory = "eStatConf/target/eStat-conf"
			}
			steps {
				cleanProjectPrimaryRemote(env.targetDirectory)
				sh "mkdir -p ${env.gitRoot}"
				dir ("${env.gitRoot}") {
					checkoutRevisionOnRepo(env.gitRoot)
					dir ("${env.projectRoot}") {
						mvnCleanInstall(env.projectRoot, env.jdkCompilation, env.mvnVersion)
					}
					deploy(env.gitRoot, env.projectRoot, env.targetDirectory, env.sourceAppDirectory, env.sourceExtension, env.sourceConfDirectory)
				}
			}
		}
	}
}

void checkoutRevisionOnRepo(String gitRoot) {
	checkout scm: [ $class: "GitSCM", 
					userRemoteConfigs: [ [url: env.gitLabUrl+gitRoot, credentialsId: "root"] ],
					branches: [ [name: params.revision] ]
				  ], poll: false
}

void mvnCleanInstall(String projectRoot, String jdkCompilation, String mvnVersion) {
	withMaven (jdk: jdkCompilation, maven: mvnVersion) {
		sh "mvn clean install -P ${params.mavenProfile}"
	}
}

void cleanPrimaryRemote() {
	sh "ssh ${env.primaryRemote} rm -rf ${env.depotFolder}/${params.revision}/${params.mavenProfile}"
}

void cleanProjectPrimaryRemote(String targetDirectory) {
	script {
		if (targetDirectory && targetDirectory != "") { 
			sh "ssh ${env.primaryRemote} rm -rf ${env.depotFolder}/${params.revision}/${params.mavenProfile}/ESII-Applications/app/${targetDirectory}" 
			sh "ssh ${env.primaryRemote} rm -rf ${env.depotFolder}/${params.revision}/${params.mavenProfile}/ESII-Applications/conf/${targetDirectory}" 
		}
	}
}

void deploy(String gitRoot, String projectRoot, String targetDirectory, String sourceAppDirectory, String sourceExtension, String sourceConfDirectory) {
	script {
		if (targetDirectory && targetDirectory != "") {
			if (sourceAppDirectory && sourceAppDirectory != "") {
				sh "ssh ${env.primaryRemote} mkdir -p ${env.depotFolder}/${params.revision}/${params.mavenProfile}/ESII-Applications/app/${targetDirectory}"
				sh "scp ${projectRoot}/${sourceAppDirectory}/*${sourceExtension} ${env.primaryRemote}:${env.depotFolder}/${params.revision}/${params.mavenProfile}/ESII-Applications/app/${targetDirectory}"
				sh returnStatus: true, script: "ssh ${env.primaryRemote} unzip -qq -o ${env.depotFolder}/${params.revision}/${params.mavenProfile}/ESII-Applications/app/${targetDirectory}/*${sourceExtension} -d ${env.depotFolder}/${params.revision}/${params.mavenProfile}/ESII-Applications/app/${targetDirectory}/"
				sh "ssh ${env.primaryRemote} rm -f ${env.depotFolder}/${params.revision}/${params.mavenProfile}/ESII-Applications/app/${targetDirectory}/*${sourceExtension}"
			}
			if (sourceConfDirectory && sourceConfDirectory != "") {
				sh "ssh ${env.primaryRemote} mkdir -p ${env.depotFolder}/${params.revision}/${params.mavenProfile}/ESII-Applications/conf/${targetDirectory}"
				sh "scp -r ${projectRoot}/${sourceConfDirectory}/* ${env.primaryRemote}:${env.depotFolder}/${params.revision}/${params.mavenProfile}/ESII-Applications/conf/${targetDirectory}"
			}
		}
	}
}

void deployToSecondaryRemote(String secondaryRemote) {
	sh "ssh ${secondaryRemote} \"rm -rf ESII-Applications && mkdir -p ESII-Applications\""
	
	sh "scp -r ${env.primaryRemote}:${env.depotFolder}/${params.revision}/${params.mavenProfile}/ESII-Applications.gz ${secondaryRemote}:"
	sh "ssh ${secondaryRemote} tar -xf ESII-Applications.gz"
	
	sh "ssh ${secondaryRemote} rm -rf ESII-Applications.gz"
}