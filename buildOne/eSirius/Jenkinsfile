pipeline {
	agent any
	parameters {
		string(name: "revision", defaultValue: "master", description: "branche ou TAG")
	}
	environment {
		depotFolder = "depot"
		esiiAppFolder = "ESII-APPLICATION/app"
		esiiConfFolder = "ESII-APPLICATION/conf"
		gitLabUrl = "http://192.168.25.68/eSirius/"
		remoteConnexion = "esii@192.168.25.94"
	}
	stages {
		stage ("Initialize") {
			steps {
				wrap([$class: 'AnsiColorBuildWrapper']) {
					echo "\u001B[34m revision : ${params.revision} \u001B[m"
				}
				cleanWs()
			}
		}
		stage ("build eSirius") {
			environment {
				gitRoot = "eSirius"
				jdkCompilation = "JDK 1.6.0_20"
				mvnVersion = "Maven 3.2.1"
				projectRoot = "eSirius"
				sourceAppDirectory = "eSirius-app/target"
				sourceConfDirectory = "eSiriusConf/target/eSirius-Conf"
				targetDirectory = "eSirius"
			}
			steps {
				runBuild(env.gitRoot, env.projectRoot, env.jdkCompilation, env.mvnVersion, env.targetDirectory, env.sourceAppDirectory, env.sourceConfDirectory)
			}
		}
	}
}

void runBuild(String gitRoot, String projectRoot, String jdk, String mvn, String targetDirectory, String sourceAppDirectory, String sourceConfDirectory) {
	
	sh "mkdir -p ${gitRoot}"

	dir ("${gitRoot}") {
		checkoutRevisionOnRepo(gitRoot)
		mvnCleanInstall(projectRoot, jdk, mvn)
		deploy(projectRoot, targetDirectory, sourceAppDirectory, sourceConfDirectory)
	}
}

void checkoutRevisionOnRepo(String gitRoot) {
	script {
		try {
			checkout scm: [ $class: "GitSCM", 
							userRemoteConfigs: [ [url: env.gitLabUrl+gitRoot, credentialsId: "root"] ],
							branches: [ [name: params.revision] ]
						  ], poll: false
		}
		catch(Exception e) {
			wrap([$class: 'AnsiColorBuildWrapper']) {
				echo "\u001B[31mLa branche ou le tag '${params.revision}' n'existe pas sur le repository '${gitRoot}' => build de la branche 'master'\u001B[m"
			}
			checkout scm: [ $class: "GitSCM", 
							userRemoteConfigs: [ [url: env.gitLabUrl+gitRoot, credentialsId: "root"] ],
							branches: [ [name: 'master'] ]
						  ], poll: false
		}
	}
}

void mvnCleanInstall(String projectRoot, String jdk, String mvn) {
	dir ("${projectRoot}") {
		withMaven (jdk: jdk, maven: mvn) {
			sh "mvn clean install"
		}
	}
}

void deploy(String projectRoot, String targetDirectory, String sourceAppDirectory, String sourceConfDirectory) {

	script {
		
		if (targetDirectory && targetDirectory != "") {
			sh "ssh ${env.remoteConnexion} rm -rf ${env.depotFolder}/${params.revision}/${env.esiiAppFolder}/${targetDirectory}"
			sh "ssh ${env.remoteConnexion} rm -rf ${env.depotFolder}/${params.revision}/${env.esiiConfFolder}/${targetDirectory}"
		
			if (sourceAppDirectory && sourceAppDirectory != "") {
				sh "ssh ${env.remoteConnexion} mkdir -p ${env.depotFolder}/${params.revision}/${env.esiiAppFolder}/${targetDirectory}"
				sh "scp ${projectRoot}/${sourceAppDirectory}/*.war ${env.remoteConnexion}:${env.depotFolder}/${params.revision}/${env.esiiAppFolder}/${targetDirectory}"
				sh "ssh ${env.remoteConnexion} unzip ${env.depotFolder}/${params.revision}/${env.esiiAppFolder}/${targetDirectory}/*.war -d ${env.depotFolder}/${params.revision}/${env.esiiAppFolder}/${targetDirectory}/"
				sh "ssh ${env.remoteConnexion} rm -f ${env.depotFolder}/${params.revision}/${env.esiiAppFolder}/${targetDirectory}/*.war"
			}
			if (sourceConfDirectory && sourceConfDirectory != "") {
				sh "ssh ${env.remoteConnexion} mkdir -p ${env.depotFolder}/${params.revision}/${env.esiiConfFolder}/${targetDirectory}"
				sh "scp -r ${projectRoot}/${sourceConfDirectory}/* ${env.remoteConnexion}:${env.depotFolder}/${params.revision}/${env.esiiConfFolder}/${targetDirectory}"
			}
		}
	}
}