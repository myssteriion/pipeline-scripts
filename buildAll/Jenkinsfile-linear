pipeline {
	agent any
	parameters {
		string(name: "revision", defaultValue: "master", description: "branche ou TAG")
	}
	environment {
		appFolder = "app"
		confFolder = "conf"
		dataFolder = "data"
		depotFolder = "depotTest"
		esiiFolder = "ESII-Applications"
		gitLabUrl = "http://192.168.25.68/eSirius/"
		primaryRemote = "esii@192.168.25.94"
	}
	stages {
		stage ("Initialize") {
			steps {
				wrap([$class: 'AnsiColorBuildWrapper']) {
					echo "\u001B[34m revision : ${params.revision} \u001B[m"
				}
				cleanWs()
				sh "ssh ${env.primaryRemote} rm -rf ${env.depotFolder}/${params.revision}"
			}
		}
		stage ("Create data folder") {
			environment {
				enventStorage = "event-storage"
			}
			steps {
				sh "ssh ${env.primaryRemote} mkdir -p ${env.depotFolder}/${params.revision}/${env.esiiFolder}/${env.dataFolder}/${enventStorage}"
			}
		}
		stage ("build es2i") {
			environment {
				gitRoot = "es2i"
				jdkCompilation = "JDK 1.6.0_20"
				mvnVersion = "Maven 3.2.1"
				projectRoot = "es2i"
				sourceAppDirectory = ""
				sourceConfDirectory = ""
				targetDirectory = ""
			}
			steps {
				runBuild(env.gitRoot, env.projectRoot, env.jdkCompilation, env.mvnVersion, env.targetDirectory, env.sourceAppDirectory, env.sourceConfDirectory)
			}
		}
		stage ("build eCustomer") {
			environment {
				gitRoot = "eCustomer"
				jdkCompilation = "JDK 1.6.0_20"
				mvnVersion = "Maven 3.2.1"
				projectRoot = "eCustomer"
				sourceAppDirectory = "eCustomer-app/target"
				sourceConfDirectory = "eCustomer-conf/target/eCustomer-conf"
				targetDirectory = "customer"
			}
			steps {
				runBuild(env.gitRoot, env.projectRoot, env.jdkCompilation, env.mvnVersion, env.targetDirectory, env.sourceAppDirectory, env.sourceConfDirectory)
			}
		}
		stage ("build smsSender") {
			environment {
				gitRoot = "smsSender"
				jdkCompilation = "JDK 1.6.0_20"
				mvnVersion = "Maven 3.2.1"
				projectRoot = "smsSender"
				sourceAppDirectory = "smsSender-app/target"
				sourceConfDirectory = "smsSender-conf/target/smsSender-conf"
				targetDirectory = "smssender"
			}
			steps {
				runBuild(env.gitRoot, env.projectRoot, env.jdkCompilation, env.mvnVersion, env.targetDirectory, env.sourceAppDirectory, env.sourceConfDirectory)
			}
		}
		stage ("build procyon") {
			environment {
				gitRoot = "eStat"
				jdkCompilation = "JDK 1.6.0_20"
				mvnVersion = "Maven 3.2.1"
				projectRoot = "procyon"
				sourceAppDirectory = ""
				sourceConfDirectory = ""
				targetDirectory = ""
			}
			steps {
				runBuild(env.gitRoot, env.projectRoot, env.jdkCompilation, env.mvnVersion, env.targetDirectory, env.sourceAppDirectory, env.sourceConfDirectory)
			}
		}
		stage ("build eSecurity") {
			environment {
				gitRoot = "eSecurity"
				jdkCompilation = "JDK 1.6.0_20"
				mvnVersion = "Maven 3.2.1"
				projectRoot = "esecurity"
				sourceAppDirectory = "esecurity-gxt-app/target"
				sourceConfDirectory = "esecurity-conf/target/esecurity-conf"
				targetDirectory = "esecurity"
			}
			steps {
				runBuild(env.gitRoot, env.projectRoot, env.jdkCompilation, env.mvnVersion, env.targetDirectory, env.sourceAppDirectory, env.sourceConfDirectory)
			}
		}
		stage ("build eSirius-shared") {
			environment {
				gitRoot = "eSirius"
				jdkCompilation = "JDK 1.6.0_20"
				mvnVersion = "Maven 3.2.1"
				projectRoot = "eSirius-shared"
				sourceAppDirectory = ""
				sourceConfDirectory = ""
				targetDirectory = ""
			}
			steps {
				runBuild(env.gitRoot, env.projectRoot, env.jdkCompilation, env.mvnVersion, env.targetDirectory, env.sourceAppDirectory, env.sourceConfDirectory)
			}
		}
		stage ("build es2i-rsi-connector") {
			environment {
				gitRoot = "es2i-rsi-connector"
				jdkCompilation = "JDK 1.6.0_20"
				mvnVersion = "Maven 3.2.1"
				projectRoot = "es2i-rsi-connector"
				sourceAppDirectory = ""
				sourceConfDirectory = ""
				targetDirectory = ""
			}
			steps {
				runBuild(env.gitRoot, env.projectRoot, env.jdkCompilation, env.mvnVersion, env.targetDirectory, env.sourceAppDirectory, env.sourceConfDirectory)
			}
		}
		stage ("build eStat") {
			environment {
				gitRoot = "eStat"
				jdkCompilation = "JDK 1.6.0_20"
				mvnVersion = "Maven 3.2.1"
				projectRoot = "eSirius-estat"
				sourceAppDirectory = "eSirius-estat-app/target"
				sourceConfDirectory = "eStatConf/target/eStat-conf"
				targetDirectory = "estat"
			}
			steps {
				runBuild(env.gitRoot, env.projectRoot, env.jdkCompilation, env.mvnVersion, env.targetDirectory, env.sourceAppDirectory, env.sourceConfDirectory)
			}
		}
		stage ("build History") {
			environment {
				gitRoot = "History"
				jdkCompilation = "JDK 1.6.0_20"
				mvnVersion = "Maven 3.2.1"
				projectRoot = "eSirius-history"
				sourceAppDirectory = "eSirius-history-event-app/target"
				sourceConfDirectory = "eSirius-history-event-conf/target/eSirius-history-event-conf"
				targetDirectory = "esirius-history-event"
			}
			steps {
				runBuild(env.gitRoot, env.projectRoot, env.jdkCompilation, env.mvnVersion, env.targetDirectory, env.sourceAppDirectory, env.sourceConfDirectory)
			}
		}
		stage ("build ePlanning") {
			environment {
				gitRoot = "ePlanning"
				jdkCompilation = "JDK 1.6.0_20"
				mvnVersion = "Maven 3.2.1"
				projectRoot = "ePlanning"
				sourceAppDirectory = "ePlanning-app/target"
				sourceConfDirectory = "ePlanningConf/target/ePlanningConf"
				targetDirectory = "ePlanning"
			}
			steps {
				runBuild(env.gitRoot, env.projectRoot, env.jdkCompilation, env.mvnVersion, env.targetDirectory, env.sourceAppDirectory, env.sourceConfDirectory)
			}
		}
		stage ("build eSirius") {
			environment {
				gitRoot = "eSirius"
				jdkCompilation = "JDK 1.6.0_20"
				mvnVersion = "Maven 3.2.1"
				projectRoot = "eSirius"
				sourceAppDirectory = "eSirius-app/target"
				sourceConfDirectory = "eSiriusConf/target/eSirius-Conf"
				targetDirectory = "eSirius"
			}
			steps {
				runBuild(env.gitRoot, env.projectRoot, env.jdkCompilation, env.mvnVersion, env.targetDirectory, env.sourceAppDirectory, env.sourceConfDirectory)
			}
		}
		stage ("build Appointment") {
			environment {
				gitRoot = "Appointment"
				jdkCompilation = "JDK 1.6.0_20"
				mvnVersion = "Maven 3.2.1"
				projectRoot = "appointment"
				sourceAppDirectory = "appointment-app/target"
				sourceConfDirectory = "appointment-conf/target/appointment-conf"
				targetDirectory = "appointment"
			}
			steps {
				runBuild(env.gitRoot, env.projectRoot, env.jdkCompilation, env.mvnVersion, env.targetDirectory, env.sourceAppDirectory, env.sourceConfDirectory)
			}
		}
		stage ("build eAdmin") {
			environment {
				gitRoot = "eAdmin"
				jdkCompilation = "JDK 1.6.0_20"
				mvnVersion = "Maven 3.2.1"
				projectRoot = "eSirius-admin"
				sourceAppDirectory = "eSirius-admin-app/target"
				sourceConfDirectory = "eSirius-admin-conf/target/eSirius-admin-conf"
				targetDirectory = "eadmin"
			}
			steps {
				runBuild(env.gitRoot, env.projectRoot, env.jdkCompilation, env.mvnVersion, env.targetDirectory, env.sourceAppDirectory, env.sourceConfDirectory)
			}
		}
		stage ("build eVision") {
			environment {
				gitRoot = "eVision"
				jdkCompilation = "JDK 1.6.0_20"
				mvnVersion = "Maven 3.2.1"
				projectRoot = "eSirius-vision"
				sourceAppDirectory = "eSirius-vision-app/target"
				sourceConfDirectory = "eSirius-vision-conf/target/eSirius-vision-conf"
				targetDirectory = "evision"
			}
			steps {
				runBuild(env.gitRoot, env.projectRoot, env.jdkCompilation, env.mvnVersion, env.targetDirectory, env.sourceAppDirectory, env.sourceConfDirectory)
			}
		}
		stage ("secondary deploy") {
			steps {
				sh "ssh ${env.primaryRemote} \"cd ${env.depotFolder}/${params.revision} && tar -cf ${env.esiiFolder}.gz ${env.esiiFolder}\""
				deployToSecondaryRemote("esii@192.168.25.22")
				sh "ssh ${env.primaryRemote} rm -rf ${env.depotFolder}/${params.revision}/${env.esiiFolder}.gz"
			}
		}
	}
}

void runBuild(String gitRoot, String projectRoot, String jdk, String mvn, String targetDirectory, String sourceAppDirectory, String sourceConfDirectory) {
	
	sh "mkdir -p ${gitRoot}"

	dir ("${gitRoot}") {
		checkoutRevisionOnRepo(gitRoot)
		mvnCleanInstall(projectRoot, jdk, mvn)
		deploy(projectRoot, targetDirectory, sourceAppDirectory, sourceConfDirectory)
	}
}

void checkoutRevisionOnRepo(String gitRoot) {
	checkout scm: [ $class: "GitSCM", 
					userRemoteConfigs: [ [url: env.gitLabUrl+gitRoot, credentialsId: "root"] ],
					branches: [ [name: params.revision] ]
				  ], poll: false
}

void mvnCleanInstall(String projectRoot, String jdk, String mvn) {
	dir ("${projectRoot}") {
		withMaven (jdk: jdk, maven: mvn) {
			sh "mvn clean install"
		}
	}
}

void deploy(String projectRoot, String targetDirectory, String sourceAppDirectory, String sourceConfDirectory) {

	script {
		
		if (targetDirectory && targetDirectory != "") {
			sh "ssh ${env.primaryRemote} rm -rf ${env.depotFolder}/${params.revision}/${env.esiiFolder}/${env.appFolder}/${targetDirectory}"
			sh "ssh ${env.primaryRemote} rm -rf ${env.depotFolder}/${params.revision}/${env.esiiFolder}/${env.confFolder}/${targetDirectory}"
		
			if (sourceAppDirectory && sourceAppDirectory != "") {
				sh "ssh ${env.primaryRemote} mkdir -p ${env.depotFolder}/${params.revision}/${env.esiiFolder}/${env.appFolder}/${targetDirectory}"
				sh "scp ${projectRoot}/${sourceAppDirectory}/*.war ${env.primaryRemote}:${env.depotFolder}/${params.revision}/${env.esiiFolder}/${env.appFolder}/${targetDirectory}"
				sh "ssh ${env.primaryRemote} unzip ${env.depotFolder}/${params.revision}/${env.esiiFolder}/${env.appFolder}/${targetDirectory}/*.war -d ${env.depotFolder}/${params.revision}/${env.esiiFolder}/${env.appFolder}/${targetDirectory}/"
				sh "ssh ${env.primaryRemote} rm -f ${env.depotFolder}/${params.revision}/${env.esiiFolder}/${env.appFolder}/${targetDirectory}/*.war"
			}
			if (sourceConfDirectory && sourceConfDirectory != "") {
				sh "ssh ${env.primaryRemote} mkdir -p ${env.depotFolder}/${params.revision}/${env.esiiFolder}/${env.confFolder}/${targetDirectory}"
				sh "scp -r ${projectRoot}/${sourceConfDirectory}/* ${env.primaryRemote}:${env.depotFolder}/${params.revision}/${env.esiiFolder}/${env.confFolder}/${targetDirectory}"
			}
		}
	}
}

void deployToSecondaryRemote(String secondaryRemote) {
	sh "ssh ${secondaryRemote} \"rm -rf ${env.esiiFolder} && mkdir -p ${env.esiiFolder}\""
	
	sh "scp -r ${env.primaryRemote}:${env.depotFolder}/${params.revision}/${env.esiiFolder}.gz ${secondaryRemote}:"
	sh "ssh ${secondaryRemote} tar -xf ${env.esiiFolder}.gz"
	
	sh "ssh ${secondaryRemote} rm -rf ${env.esiiFolder}.gz"
}